extensions:
  basicauth/otlp:
    client_auth:
      # NOTES:
      # 1.) These values will need to be generated by Grafana and set in your
      #     Shell in order for the OTEL instance to talk to ship metrics to Grafana
      # 2.) I'm not sure why I can't use environment substition from OTEL for these variables.
      #     even though its mentioned ini their docs you can. Since this repo is more focused
      #     on temporal than otel I'm using envsubst command for these
      username: "$OTEL_GRAFANA_INSTANCE_ID"
      password: "$OTEL_GRAFANA_API_TOKEN"

receivers:
  prometheus:
    config:
      scrape_configs:
        # UnComment to test OTEL connection to Grafana without temporal
        # - job_name: 'otelcol'
        #   scrape_interval: 10s
        #   static_configs:
        #     - targets: ["0.0.0.0:8888"]
        #   metric_relabel_configs:
        #     - source_labels: [__name__]
        #       regex: '.*grpc_io.*'
        #       action: drop
        - job_name: 'temporalcol'
          scrape_interval: 10s
          static_configs:
            - targets: ["temporal-server:4333"]
          metrics_path: "/metrics"
  # Not sure if oltp actually works with temporal, so far haven't had much luck with it
  # otlp:
  #   # https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver/otlpreceiver
  #   protocols:
  #     grpc:
  #       endpoint: '0.0.0.0:4317'
  #     http:

processors:
  batch:
    # https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor/batchprocessor

exporters:
  otlphttp:
    auth:
      authenticator: basicauth/otlp
    endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT}

service:
  extensions: [basicauth/otlp]

  telemetry:
    metrics:
      address: 0.0.0.0:8888
      level: detailed
  pipelines:
    metrics:
      receivers: [prometheus]
      processors: [batch]
      exporters: [otlphttp]